(()=>{"use strict";class st{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new st);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],h=s[4],u=s[5],d=s[6],f=s[7],p=s[8],m=n[0],v=n[1],w=n[2],y=n[3],g=n[4],b=n[5],B=n[6],C=n[7],F=n[8];return i[0]=o*m+r*y+c*B,i[1]=o*v+r*g+c*C,i[2]=o*w+r*b+c*F,i[3]=a*m+h*y+u*B,i[4]=a*v+h*g+u*C,i[5]=a*w+h*b+u*F,i[6]=d*m+f*y+p*B,i[7]=d*v+f*g+p*C,i[8]=d*w+f*b+p*F,e}scale(t,e){void 0===e&&(e=new st);const s=this.elements,n=e.elements;for(let i=0;3!==i;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){void 0===e&&(e=new l);const i=[];let o,r;for(o=0;o<12;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+4*r]=this.elements[o+3*r];i[3]=t.x,i[7]=t.y,i[11]=t.z;let c=3;const a=c;let h,d;do{if(o=a-c,0===i[o+4*o])for(r=o+1;r<a;r++)if(0!==i[o+4*r]){h=4;do{d=4-h,i[d+4*o]+=i[d+4*r]}while(--h);break}if(0!==i[o+4*o])for(r=o+1;r<a;r++){const f=i[o+4*r]/i[o+4*o];h=4;do{d=4-h,i[d+4*r]=d<=o?0:i[d+4*r]-i[d+4*o]*f}while(--h)}}while(--c);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let s=0;s<9;s++)t+=this.elements[s]+",";return t}reverse(t){void 0===t&&(t=new st);const n=os;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+6*o]=this.elements[i+3*o];n[3]=1,n[9]=0,n[15]=0,n[4]=0,n[10]=1,n[16]=0,n[5]=0,n[11]=0,n[17]=1;let r=3;const c=r;let a,u;do{if(i=c-r,0===n[i+6*i])for(o=i+1;o<c;o++)if(0!==n[i+6*o]){a=6;do{u=6-a,n[u+6*i]+=n[u+6*o]}while(--a);break}if(0!==n[i+6*i])for(o=i+1;o<c;o++){const d=n[i+6*o]/n[i+6*i];a=6;do{u=6-a,n[u+6*o]=u<=i?0:n[u+6*o]-n[u+6*i]*d}while(--a)}}while(--r);i=2;do{o=i-1;do{const d=n[i+6*o]/n[i+6*i];a=6;do{u=6-a,n[u+6*o]=n[u+6*o]-n[u+6*i]*d}while(--a)}while(o--)}while(--i);i=2;do{const d=1/n[i+6*i];a=6;do{u=6-a,n[u+6*i]=n[u+6*i]*d}while(--a)}while(i--);i=2;do{o=2;do{if(u=n[3+o+6*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,h=e*r,u=e*c,d=s*r,f=s*c,p=n*c,m=i*o,v=i*r,w=i*c,y=this.elements;return y[0]=1-(d+p),y[1]=h-w,y[2]=u+v,y[3]=h+w,y[4]=1-(a+p),y[5]=f-m,y[6]=u-v,y[7]=f+m,y[8]=1-(a+d),this}transpose(t){void 0===t&&(t=new st);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const os=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new l(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new l(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new st([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){void 0===t&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){void 0===e&&(e=new l);const n=this.y,i=this.z;return e.x=t*this.x,e.y=t*n,e.z=t*i,e}vmul(t,e){return void 0===e&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=rs,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=cs;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(ue),ue.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0),l.UNIT_X=new l(1,0,0),l.UNIT_Y=new l(0,1,0),l.UNIT_Z=new l(0,0,1);const rs=new l,cs=new l,ue=new l;class G{constructor(t){void 0===t&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,pe),a=pe),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new G).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return(n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x)&&(n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y)&&(n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z)}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,h=this.upperBound;t.copy(a),e.set(h.x,a.y,a.z),s.set(h.x,h.y,a.z),n.set(a.x,h.y,h.z),i.set(h.x,a.y,h.z),o.set(a.x,h.y,a.z),r.set(a.x,a.y,h.z),c.copy(h)}toLocalFrame(t,e){const s=fe;this.getCorners(s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7]);for(let d=0;8!==d;d++){const f=s[d];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=fe;this.getCorners(s[0],s[1],s[2],s[3],s[4],s[5],s[6],s[7]);for(let d=0;8!==d;d++){const f=s[d];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,h=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,d=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,h)),Math.min(u,d)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,h)),Math.max(u,d));return!(p<0||f>p)}}const pe=new l,fe=[new l,new l,new l,new l,new l,new l,new l,new l];class me{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ve{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){return void 0!==this._listeners&&void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const n=s[t].indexOf(e);return-1!==n&&s[t].splice(n,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const s=this._listeners[t.type];if(void 0!==s){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class D{constructor(t,e,s,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===n&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=as;t.tangents(s,ls),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new D);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,h=t.w;return e.x=s*h+o*r+n*a-i*c,e.y=n*h+o*c+i*r-s*a,e.z=i*h+o*a+s*c-n*r,e.w=o*h-s*r-n*c-i*a,e}inverse(t){void 0===t&&(t=new D);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new D),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,h=a*s+r*i-c*n,u=a*n+c*s-o*i,d=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=h*a+f*-o+u*-c-d*-r,e.y=u*a+f*-r+d*-o-h*-c,e.z=d*a+f*-c+h*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,n,i;void 0===e&&(e="YZX");const o=this.x,r=this.y,c=this.z,a=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const h=o*r+c*a;if(h>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),h<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),void 0===s){const u=o*o,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-r*r*2-2*f),n=Math.asin(2*h),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){void 0===n&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):"YXZ"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):"ZXY"===n?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r-c*a*h):"ZYX"===n?(this.x=c*o*r-i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r+c*a*h):"YZX"===n?(this.x=c*o*r+i*a*h,this.y=i*a*r+c*o*h,this.z=i*o*h-c*a*r,this.w=i*o*r-c*a*h):"XZY"===n&&(this.x=c*o*r-i*a*h,this.y=i*a*r-c*o*h,this.z=i*o*h+c*a*r,this.w=i*o*r+c*a*h),this}clone(){return new D(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new D);const n=this.x,i=this.y,o=this.z,r=this.w;let d,f,p,m,v,c=t.x,a=t.y,h=t.z,u=t.w;return f=n*c+i*a+o*h+r*u,f<0&&(f=-f,c=-c,a=-a,h=-h,u=-u),1-f>1e-6?(d=Math.acos(f),p=Math.sin(d),m=Math.sin((1-e)*d)/p,v=Math.sin(e*d)/p):(m=1-e,v=e),s.x=m*n+v*c,s.y=m*i+v*a,s.z=m*o+v*h,s.w=m*r+v*u,s}integrate(t,e,s,n){void 0===n&&(n=new D);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,h=this.z,u=this.w,d=.5*e;return n.x+=d*(i*u+o*h-r*a),n.y+=d*(o*u+r*c-i*h),n.z+=d*(r*u+i*a-o*c),n.w+=d*(-i*c-o*a-r*h),n}}const as=new l,ls=new l,hs={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};let _=(()=>{class x{constructor(e){void 0===e&&(e={}),this.id=x.idCounter++,this.type=e.type||0,this.boundingSphereRadius=0,this.collisionResponse=!e.collisionResponse||e.collisionResponse,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:1,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.material=e.material?e.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(e,s){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(e,s,n,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}return x.idCounter=0,x.types=hs,x})();class j{constructor(t){void 0===t&&(t={}),this.position=new l,this.quaternion=new D,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return j.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return j.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return void 0===n&&(n=new l),s.vsub(t,n),e.conjugate(ye),ye.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return void 0===n&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return void 0===n&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const ye=new D;class wt extends _{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:_.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){e[o[c]].vsub(e[o[(c+1)%r]],n),n.normalize();let h=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){h=!0;break}h||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;if(this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e,e.dot(this.vertices[this.faces[t][0]])<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t];wt.computeNormal(this.vertices[s[0]],this.vertices[s[1]],this.vertices[s[2]],e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const h=new l;let u=-1,d=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){h.copy(s.faceNormals[p]),i.vmult(h,h);const m=h.dot(o);m>d&&(d=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],v=new l;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,h=new l,u=new l,d=new l,f=new l,p=new l;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],a);const y=v.testSepAxis(a,t,e,s,n,i);if(!1===y)return!1;y<m&&(m=y,o.copy(a))}else{const w=r?r.length:v.faces.length;for(let y=0;y<w;y++){a.copy(v.faceNormals[r?r[y]:y]),s.vmult(a,a);const b=v.testSepAxis(a,t,e,s,n,i);if(!1===b)return!1;b<m&&(m=b,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],h);const y=v.testSepAxis(h,t,e,s,n,i);if(!1===y)return!1;y<m&&(m=y,o.copy(h))}else{const w=c?c.length:t.faces.length;for(let y=0;y<w;y++){h.copy(t.faceNormals[c?c[y]:y]),i.vmult(h,h);const b=v.testSepAxis(h,t,e,s,n,i);if(!1===b)return!1;b<m&&(m=b,o.copy(h))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],d);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),d.cross(f,p),!p.almostZero()){p.normalize();const g=v.testSepAxis(p,t,e,s,n,i);if(!1===g)return!1;g<m&&(m=g,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){wt.project(this,t,s,n,te),wt.project(e,t,i,o,ee);const c=te[0],a=te[1],h=ee[0],u=ee[1];if(c<u||h<a)return!1;const d=c-u,f=h-a;return d<f?d:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){return-this.faceNormals[t].dot(this.vertices[this.faces[t][0]])}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,h=new l,u=new l,d=new l,f=new l,p=new l,m=new l,v=this,y=n,g=[];let b=-1,B=Number.MAX_VALUE;for(let T=0;T<v.faces.length;T++){c.copy(v.faceNormals[T]),s.vmult(c,c);const R=c.dot(t);R<B&&(B=R,b=T)}if(b<0)return;const C=v.faces[b];C.connectedFaces=[];for(let T=0;T<v.faces.length;T++)for(let R=0;R<v.faces[T].length;R++)-1!==C.indexOf(v.faces[T][R])&&T!==b&&-1===C.connectedFaces.indexOf(T)&&C.connectedFaces.push(T);const F=C.length;for(let T=0;T<F;T++){const R=v.vertices[C[T]];R.vsub(v.vertices[C[(T+1)%F]],a),h.copy(a),s.vmult(h,h),e.vadd(h,h),u.copy(this.faceNormals[b]),s.vmult(u,u),e.vadd(u,u),h.cross(u,d),d.negate(d),f.copy(R),s.vmult(f,f),e.vadd(f,f);const A=C.connectedFaces[T];p.copy(this.faceNormals[A]);const S=this.getPlaneConstantOfFace(A);m.copy(p),s.vmult(m,m);const z=S-m.dot(e);for(this.clipFaceAgainstPlane(y,g,m,z);y.length;)y.shift();for(;g.length;)y.push(g.shift())}p.copy(this.faceNormals[b]);const N=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const q=N-m.dot(e);for(let T=0;T<y.length;T++){let R=m.dot(y[T])+q;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=o){const V=y[T];R<=1e-6&&r.push({point:V,normal:m,depth:R})}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let h=0;h<r;h++){if(a=t[h],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,h,u,d=new l;for(let f=0;f<i.length;f++){d.copy(i[f]),e.vmult(d,d),t.vadd(d,d);const p=d;(void 0===o||p.x<o)&&(o=p.x),(void 0===a||p.x>a)&&(a=p.x),(void 0===r||p.y<r)&&(r=p.y),(void 0===h||p.y>h)&&(h=p.y),(void 0===c||p.z<c)&&(c=p.z),(void 0===u||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(a,h,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,o=new l;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const a=e[s[r][0]],h=new l;t.vsub(a,h);const u=c.dot(h),d=new l;o.vsub(a,d);const f=c.dot(d);if(u<0&&f>0||u>0&&f<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=us;let c=0,a=0;const h=ps,u=t.vertices;h.setZero(),j.vectorToLocalFrame(s,n,e,r),j.pointToLocalFrame(s,n,h,h);const d=h.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=d,c-=d,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const te=[],ee=[],us=(new l,new l),ps=new l;class Ot extends _{constructor(t){super({type:_.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new wt({vertices:i,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new l),Ot.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),void 0!==e)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)yt.set(i[o][0],i[o][1],i[o][2]),e.vmult(yt,yt),t.vadd(yt,yt),s(yt.x,yt.y,yt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;it[0].set(i.x,i.y,i.z),it[1].set(-i.x,i.y,i.z),it[2].set(-i.x,-i.y,i.z),it[3].set(-i.x,-i.y,-i.z),it[4].set(i.x,-i.y,-i.z),it[5].set(i.x,i.y,-i.z),it[6].set(-i.x,i.y,-i.z),it[7].set(i.x,-i.y,i.z);const o=it[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=it[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,h=c.y,u=c.z;a>n.x&&(n.x=a),h>n.y&&(n.y=h),u>n.z&&(n.z=u),a<s.x&&(s.x=a),h<s.y&&(s.y=h),u<s.z&&(s.z=u)}}}const yt=new l,it=[new l,new l,new l,new l,new l,new l,new l,new l];class M extends ve{constructor(t){void 0===t&&(t={}),super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=!(typeof t.allowSleep<"u")||t.allowSleep,this.sleepState=M.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new D,this.initQuaternion=new D,this.previousQuaternion=new D,this.interpolatedQuaternion=new D,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new st,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new st,this.fixedRotation=typeof t.fixedRotation<"u"&&t.fixedRotation,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new G,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=M.AWAKE,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===M.AWAKE&&s<n?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>n?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new D;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=fs,o=ms,r=this.quaternion,c=this.aabb,a=vs;for(let h=0;h!==n;h++){const u=t[h];r.vmult(e[h],i),i.vadd(this.position,i),r.mult(s[h],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),0===h?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const s=ys,n=ws;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(void 0===e&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=gs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new l),this.type!==M.DYNAMIC)return;const s=bs,n=As;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===M.DYNAMIC&&(this.sleepState===M.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=e,n=Bs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Es;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new l),this.type!==M.DYNAMIC)return;const s=Cs,n=zs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Ss;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Ot.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==M.DYNAMIC&&this.type!==M.KINEMATIC||this.sleepState===M.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,u=this.invInertiaWorld,d=this.linearFactor,f=this.invMass*t;n.x+=r.x*f*d.x,n.y+=r.y*f*d.y,n.z+=r.z*f*d.z;const p=u.elements,m=this.angularFactor,v=c.x*m.x,w=c.y*m.y,y=c.z*m.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*y),i.y+=t*(p[3]*v+p[4]*w+p[5]*y),i.z+=t*(p[6]*v+p[7]*w+p[8]*y),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.idCounter=0,M.COLLIDE_EVENT_NAME="collide",M.DYNAMIC=1,M.STATIC=2,M.KINEMATIC=4,M.AWAKE=0,M.SLEEPY=1,M.SLEEPING=2,M.wakeupEvent={type:"wakeup"},M.sleepyEvent={type:"sleepy"},M.sleepEvent={type:"sleep"};const fs=new l,ms=new D,vs=new G,ys=new st,ws=new st,gs=(new st,new l),bs=new l,As=new l,Bs=new l,Es=new l,Cs=new l,zs=new l,Ss=new l;class we{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(0==(t.collisionFilterGroup&e.collisionFilterMask)||0==(e.collisionFilterGroup&t.collisionFilterMask)||(0!=(t.type&M.STATIC)||t.sleepState===M.SLEEPING)&&(0!=(e.type&M.STATIC)||e.sleepState===M.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Fs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ms,n=_s,i=Is,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,h=c<a?`${c},${a}`:`${a},${c}`;s[h]=r,s.keys.push(h)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;return t.position.vsub(e.position,s),Math.pow(t.shapes[0].boundingSphereRadius+e.shapes[0].boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Fs=new l;new l,new D,new l;const Ms={keys:[]},_s=[],Is=[];new l,new l,new l;class Ts extends we{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Tt{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let xe,ge,be,Ae,Be,Ee,Ce;xe=_.types.SPHERE,ge=_.types.PLANE,be=_.types.BOX,Ae=_.types.CYLINDER,Be=_.types.CONVEXPOLYHEDRON,Ee=_.types.HEIGHTFIELD,Ce=_.types.TRIMESH;class U{get[xe](){return this._intersectSphere}get[ge](){return this._intersectPlane}get[be](){return this._intersectBox}get[Ae](){return this._intersectConvex}get[Be](){return this._intersectConvex}get[Ee](){return this._intersectHeightfield}get[Ce](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new l),void 0===e&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=U.ANY,this.result=new Tt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||U.ANY,this.result=e.result||new Tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=!(typeof e.checkCollisionResponse<"u")||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ze),oe.length=0,t.broadphase.aabbQuery(t,ze,oe),this.intersectBodies(oe),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Ps,i=Rs;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if((!s||c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){if(function Ks(x,t,e){e.vsub(x,xt);const s=xt.dot(t);return t.scale(s,Gt),Gt.vadd(x,Gt),e.distanceTo(Gt)}(this.from,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const h=new l;o.vsub(s,h);const u=h.dot(a);if(r.vsub(s,h),u*h.dot(a)>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,m=new l,v=new l;o.vsub(s,p);const w=-a.dot(p)/f;c.scale(w,m),o.vadd(m,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){const o=qs;o.from.copy(this.from),o.to.copy(this.to),j.pointToLocalFrame(s,e,o.from,o.from),j.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ls;let c,a,h,u;c=a=0,h=u=t.data.length-1;const d=new G;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<h;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),j.pointToWorldFrame(s,e,t.pillarOffset,Ht),this._intersectConvex(t.pillarConvex,e,Ht,n,i,Se),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),j.pointToWorldFrame(s,e,t.pillarOffset,Ht),this._intersectConvex(t.pillarConvex,e,Ht,n,i,Se)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),d=h**2-4*a*((o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-t.radius**2),f=Ws,p=Vs;if(!(d<0))if(0===d)o.lerp(r,d,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-h-Math.sqrt(d))/(2*a),v=(-h+Math.sqrt(d))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=js,c=Fe,a=o&&o.faceList||null,h=t.faces,u=t.vertices,d=t.faceNormals,f=this.direction,p=this.from,v=p.distanceTo(this.to),w=a?a.length:h.length,y=this.result;for(let g=0;!y.shouldStop&&g<w;g++){const b=a?a[g]:g,B=h[b],C=d[b],F=e,N=s;c.copy(u[B[0]]),F.vmult(c,c),c.vadd(N,c),c.vsub(p,c),F.vmult(C,r);const q=f.dot(r);if(Math.abs(q)<this.precision)continue;const T=r.dot(c)/q;if(!(T<0)){f.scale(T,J),J.vadd(p,J),nt.copy(u[B[0]]),F.vmult(nt,nt),N.vadd(nt,nt);for(let R=1;!y.shouldStop&&R<B.length-1;R++){ot.copy(u[B[R]]),rt.copy(u[B[R+1]]),F.vmult(ot,ot),F.vmult(rt,rt),N.vadd(ot,ot),N.vadd(rt,rt);const V=J.distanceTo(p);!U.pointInTriangle(J,nt,ot,rt)&&!U.pointInTriangle(J,ot,nt,rt)||V>v||this.reportIntersection(r,J,i,n,b)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Hs,c=$s,a=Zs,h=Fe,u=Gs,d=Ds,f=Us,p=Xs,m=Ys,v=t.indices,w=this.from,y=this.to,g=this.direction;a.position.copy(s),a.quaternion.copy(e),j.vectorToLocalFrame(s,e,g,u),j.pointToLocalFrame(s,e,w,d),j.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,f.vsub(d,u),u.normalize();const b=d.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let B=0,C=c.length;!this.result.shouldStop&&B!==C;B++){const F=c[B];t.getNormal(F,r),t.getVertex(v[3*F],nt),nt.vsub(d,h);const N=u.dot(r),q=r.dot(h)/N;if(q<0)continue;u.scale(q,J),J.vadd(d,J),t.getVertex(v[3*F+1],ot),t.getVertex(v[3*F+2],rt);const T=J.distanceSquared(d);!U.pointInTriangle(J,ot,nt,rt)&&!U.pointInTriangle(J,nt,ot,rt)||T>b||(j.vectorToWorldFrame(e,r,m),j.pointToWorldFrame(s,e,J,p),this.reportIntersection(m,p,i,n,F))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case U.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case U.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case U.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0}}static pointInTriangle(t,e,s,n){n.vsub(e,xt),s.vsub(e,Pt),t.vsub(e,re);const i=xt.dot(xt),o=xt.dot(Pt),r=xt.dot(re),c=Pt.dot(Pt),a=Pt.dot(re);let h,u;return(h=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&h+u<i*c-o*o}}U.CLOSEST=1,U.ANY=2,U.ALL=4;const ze=new G,oe=[],Pt=new l,re=new l,Ps=new l,Rs=new D,J=new l,nt=new l,ot=new l,rt=new l;new l,new Tt;const Se={faceList:[0]},Ht=new l,qs=new U,Ls=[],Ws=new l,Vs=new l,js=new l,Fe=(new l,new l,new l),Hs=new l,Gs=new l,Ds=new l,Us=new l,Ys=new l,Xs=new l;new G;const $s=[],Zs=new j,xt=new l,Gt=new l;class Bt extends we{static checkBounds(t,e,s){let n,i;return 0===s?(n=t.position.x,i=e.position.x):1===s?(n=t.position.y,i=e.position.y):2===s&&(n=t.position.z,i=e.position.z),i-e.boundingRadius<n+t.boundingRadius}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);-1!==n&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,c;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const a=n[r];for(c=r+1;c<i;c++){const h=n[c];if(this.needBroadphaseCollision(a,h)){if(!Bt.checkBounds(a,h,o))break;this.intersectionTest(a,h,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}0===e?Bt.insertionSortX(t):1===e?Bt.insertionSortY(t):2===e&&Bt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,c=r.length,a=1/c;for(let f=0;f!==c;f++){const p=r[f],m=p.position.x;t+=m,e+=m*m;const v=p.position.y;s+=v,n+=v*v;const w=p.position.z;i+=w,o+=w*w}const h=e-t*t*a,u=n-s*s*a,d=o-i*i*a;this.axisIndex=h>u?h>d?0:2:u>d?1:2}aabbQuery(t,e,s){void 0===s&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";1===n&&(i="y"),2===n&&(i="z");const o=this.axisList;for(let r=0;r<o.length;r++){const c=o[r];c.aabbNeedsUpdate&&c.updateAABB(),c.aabb.overlaps(e)&&s.push(c)}return s}}class ce{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Me{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}let _e=(()=>{class x{constructor(e,s,n,i){void 0===n&&(n=-1e6),void 0===i&&(i=1e6),this.id=x.idCounter++,this.minForce=n,this.maxForce=i,this.bi=e,this.bj=s,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Me,this.jacobianElementB=new Me,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(e,s,n){const i=s,o=e,r=n;this.a=4/(r*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(r*r*o*(1+4*i))}computeB(e,s,n){const i=this.computeGW();return-this.computeGq()*e-i*s-this.computeGiMf()*n}computeGq(){const s=this.jacobianElementB,r=this.bj.position;return this.jacobianElementA.spatial.dot(this.bi.position)+s.spatial.dot(r)}computeGW(){const s=this.jacobianElementB,n=this.bi,i=this.bj,r=i.velocity,a=i.angularVelocity;return this.jacobianElementA.multiplyVectors(n.velocity,n.angularVelocity)+s.multiplyVectors(r,a)}computeGWlambda(){const s=this.jacobianElementB,n=this.bi,i=this.bj,r=i.vlambda,a=i.wlambda;return this.jacobianElementA.multiplyVectors(n.vlambda,n.wlambda)+s.multiplyVectors(r,a)}computeGiMf(){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,r=n.torque,c=i.force,a=i.torque,u=i.invMassSolve;return n.force.scale(n.invMassSolve,Ie),c.scale(u,Ne),n.invInertiaWorldSolve.vmult(r,Te),i.invInertiaWorldSolve.vmult(a,Pe),e.multiplyVectors(Ie,Te)+s.multiplyVectors(Ne,Pe)}computeGiMGt(){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,a=i.invInertiaWorldSolve;let h=n.invMassSolve+i.invMassSolve;return n.invInertiaWorldSolve.vmult(e.rotational,Dt),h+=Dt.dot(e.rotational),a.vmult(s.rotational,Dt),h+=Dt.dot(s.rotational),h}addToWlambda(e){const s=this.jacobianElementA,n=this.jacobianElementB,i=this.bi,o=this.bj,r=Qs;i.vlambda.addScaledVector(i.invMassSolve*e,s.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*e,n.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(s.rotational,r),i.wlambda.addScaledVector(e,r,i.wlambda),o.invInertiaWorldSolve.vmult(n.rotational,r),o.wlambda.addScaledVector(e,r,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}return x.idCounter=0,x})();const Ie=new l,Ne=new l,Te=new l,Pe=new l,Dt=new l,Qs=new l;class Rt extends _e{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=Js,a=tn,h=n.velocity,u=n.angularVelocity,d=i.velocity,f=i.angularVelocity,p=en,m=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,a),w.negate(m.spatial),c.negate(m.rotational),v.spatial.copy(w),v.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const y=w.dot(p),g=this.restitution+1;return-y*e-(g*d.dot(w)-g*h.dot(w)+f.dot(a)-u.dot(c))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=sn,e=nn,s=on,n=rn,i=cn;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Js=new l,tn=new l,en=new l,sn=new l,nn=new l,on=new l,rn=new l,cn=new l;new l,new l,new l,new l,new l,new l,new l,new l,new l,new l;class Re extends _e{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){const e=this.b,n=this.rj,i=xn,o=gn,r=this.t;this.ri.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;return r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o),-this.computeGW()*e-t*this.computeGiMf()}}const xn=new l,gn=new l;let bn=(()=>{class x{constructor(e,s,n){n=ce.defaults(n,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=x.idCounter++,this.materials=[e,s],this.friction=n.friction,this.restitution=n.restitution,this.contactEquationStiffness=n.contactEquationStiffness,this.contactEquationRelaxation=n.contactEquationRelaxation,this.frictionEquationStiffness=n.frictionEquationStiffness,this.frictionEquationRelaxation=n.frictionEquationRelaxation}}return x.idCounter=0,x})(),qe=(()=>{class x{constructor(e){void 0===e&&(e={});let s="";"string"==typeof e&&(s=e,e={}),this.name=s,this.id=x.idCounter++,this.friction=typeof e.friction<"u"?e.friction:-1,this.restitution=typeof e.restitution<"u"?e.restitution:-1}}return x.idCounter=0,x})();new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new U,new l,new l,new l,new l(1,0,0),new l(0,1,0),new l(0,0,1),new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l;class ae extends _{constructor(t){if(super({type:_.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new G,new l,new G,new l,new l,new l,new l,new l,new l,new l,new G,new l,new j,new G;class Ci{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class zi extends Ci{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,h=t;let u,d,f,p,m,v;if(0!==r)for(let b=0;b!==a;b++)c[b].updateSolveMassProperties();const w=Fi,y=Mi,g=Si;w.length=r,y.length=r,g.length=r;for(let b=0;b!==r;b++){const B=o[b];g[b]=0,y[b]=B.computeB(h),w[b]=1/B.computeC()}if(0!==r){for(let C=0;C!==a;C++){const F=c[C],q=F.wlambda;F.vlambda.set(0,0,0),q.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const F=o[C];u=y[C],d=w[C],v=g[C],m=F.computeGWlambda(),f=d*(u-m-F.eps*v),v+f<F.minForce?f=F.minForce-v:v+f>F.maxForce&&(f=F.maxForce-v),g[C]+=f,p+=f>0?f:-f,F.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==a;C++){const F=c[C],N=F.velocity,q=F.angularVelocity;F.vlambda.vmul(F.linearFactor,F.vlambda),N.vadd(F.vlambda,N),F.wlambda.vmul(F.angularFactor,F.wlambda),q.vadd(F.wlambda,q)}let b=o.length;const B=1/h;for(;b--;)o[b].multiplier=g[b]*B}return s}}const Si=[],Fi=[],Mi=[];class Li{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Wi extends Li{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const O_sphereSphere=_.types.SPHERE,O_spherePlane=_.types.SPHERE|_.types.PLANE,O_boxBox=_.types.BOX|_.types.BOX,O_sphereBox=_.types.SPHERE|_.types.BOX,O_planeBox=_.types.PLANE|_.types.BOX,O_convexConvex=_.types.CONVEXPOLYHEDRON,O_sphereConvex=_.types.SPHERE|_.types.CONVEXPOLYHEDRON,O_planeConvex=_.types.PLANE|_.types.CONVEXPOLYHEDRON,O_boxConvex=_.types.BOX|_.types.CONVEXPOLYHEDRON,O_sphereHeightfield=_.types.SPHERE|_.types.HEIGHTFIELD,O_boxHeightfield=_.types.BOX|_.types.HEIGHTFIELD,O_convexHeightfield=_.types.CONVEXPOLYHEDRON|_.types.HEIGHTFIELD,O_sphereParticle=_.types.PARTICLE|_.types.SPHERE,O_planeParticle=_.types.PLANE|_.types.PARTICLE,O_boxParticle=_.types.BOX|_.types.PARTICLE,O_convexParticle=_.types.PARTICLE|_.types.CONVEXPOLYHEDRON,O_cylinderCylinder=_.types.CYLINDER,O_sphereCylinder=_.types.SPHERE|_.types.CYLINDER,O_planeCylinder=_.types.PLANE|_.types.CYLINDER,O_boxCylinder=_.types.BOX|_.types.CYLINDER,O_convexCylinder=_.types.CONVEXPOLYHEDRON|_.types.CYLINDER,O_heightfieldCylinder=_.types.HEIGHTFIELD|_.types.CYLINDER,O_particleCylinder=_.types.PARTICLE|_.types.CYLINDER,O_sphereTrimesh=_.types.SPHERE|_.types.TRIMESH,O_planeTrimesh=_.types.PLANE|_.types.TRIMESH;class Vi{get[O_sphereSphere](){return this.sphereSphere}get[O_spherePlane](){return this.spherePlane}get[O_boxBox](){return this.boxBox}get[O_sphereBox](){return this.sphereBox}get[O_planeBox](){return this.planeBox}get[O_convexConvex](){return this.convexConvex}get[O_sphereConvex](){return this.sphereConvex}get[O_planeConvex](){return this.planeConvex}get[O_boxConvex](){return this.boxConvex}get[O_sphereHeightfield](){return this.sphereHeightfield}get[O_boxHeightfield](){return this.boxHeightfield}get[O_convexHeightfield](){return this.convexHeightfield}get[O_sphereParticle](){return this.sphereParticle}get[O_planeParticle](){return this.planeParticle}get[O_boxParticle](){return this.boxParticle}get[O_convexParticle](){return this.convexParticle}get[O_cylinderCylinder](){return this.convexConvex}get[O_sphereCylinder](){return this.sphereConvex}get[O_planeCylinder](){return this.planeConvex}get[O_boxCylinder](){return this.boxConvex}get[O_convexCylinder](){return this.convexConvex}get[O_heightfieldCylinder](){return this.heightfieldCylinder}get[O_particleCylinder](){return this.particleCylinder}get[O_sphereTrimesh](){return this.sphereTrimesh}get[O_planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Wi,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Rt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,h=n.material||e.material;return a&&h&&a.restitution>=0&&h.restitution>=0&&(r.restitution=a.restitution*h.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const h=t.si.material||s.material,u=t.sj.material||n.material;if(h&&u&&h.friction>=0&&u.friction>=0&&(a=h.friction*u.friction),a>0){const d=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new Re(s,n,d*f),v=p.length?p.pop():new Re(s,n,d*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-d*f,m.maxForce=v.maxForce=d*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];At.setZero(),Ct.setZero(),zt.setZero();const i=e.bi;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(At.vadd(e.ni,At),Ct.vadd(e.ri,Ct),zt.vadd(e.rj,zt)):(At.vsub(e.ni,At),Ct.vadd(e.rj,Ct),zt.vadd(e.ri,zt));const o=1/t;Ct.scale(o,s.ri),zt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),At.normalize(),At.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=Oi,a=Hi,h=ji,u=ki;for(let d=0,f=t.length;d!==f;d++){const p=t[d],m=e[d];let v=null;p.material&&m.material&&(v=s.getContactMaterial(p.material,m.material)||null);const w=p.type&M.KINEMATIC&&m.type&M.STATIC||p.type&M.STATIC&&m.type&M.KINEMATIC||p.type&M.KINEMATIC&&m.type&M.KINEMATIC;for(let y=0;y<p.shapes.length;y++){p.quaternion.mult(p.shapeOrientations[y],c),p.quaternion.vmult(p.shapeOffsets[y],h),h.vadd(p.position,h);const g=p.shapes[y];for(let b=0;b<m.shapes.length;b++){m.quaternion.mult(m.shapeOrientations[b],a),m.quaternion.vmult(m.shapeOffsets[b],u),u.vadd(m.position,u);const B=m.shapes[b];if(!(g.collisionFilterMask&B.collisionFilterGroup&&B.collisionFilterMask&g.collisionFilterGroup)||h.distanceTo(u)>g.boundingSphereRadius+B.boundingSphereRadius)continue;let C=null;g.material&&B.material&&(C=s.getContactMaterial(g.material,B.material)||null),this.currentContactMaterial=C||v||s.defaultContactMaterial;const N=this[g.type|B.type];if(N){let q=!1;q=g.type<B.type?N.call(this,g,B,h,u,c,a,p,m,g,B,w):N.call(this,B,g,u,h,a,c,m,p,g,B,w),q&&w&&(s.shapeOverlapKeeper.set(g.id,B.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,h,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const d=this.createContactEquation(r,c,t,e,a,h);n.vsub(s,d.ni),d.ni.normalize(),d.ri.copy(d.ni),d.rj.copy(d.ni),d.ri.scale(t.radius,d.ri),d.rj.scale(-e.radius,d.rj),d.ri.vadd(s,d.ri),d.ri.vsub(r.position,d.ri),d.rj.vadd(n,d.rj),d.rj.vsub(c.position,d.rj),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,h,u){const d=this.createContactEquation(r,c,t,e,a,h);if(d.ni.set(0,0,1),o.vmult(d.ni,d.ni),d.ni.negate(d.ni),d.ni.normalize(),d.ni.scale(t.radius,d.ri),s.vsub(n,Zt),d.ni.scale(d.ni.dot(Zt),$e),Zt.vsub($e,d.rj),-Zt.dot(d.ni)<=t.radius){if(u)return!0;const f=d.ri,p=d.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(d),this.createFrictionEquationsFromContact(d,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool,f=vo;s.vsub(n,Kt),e.getSideNormals(f,o);const p=t.radius;let m=!1;const v=wo,w=xo,y=go;let g=null,b=0,B=0,C=0,F=null;for(let E=0,k=f.length;E!==k&&!1===m;E++){const L=po;L.copy(f[E]);const P=L.length();L.normalize();const W=Kt.dot(L);if(W<P+p&&W>0){const H=fo,I=mo;H.copy(f[(E+1)%3]),I.copy(f[(E+2)%3]);const K=H.length(),Q=I.length();H.normalize(),I.normalize();const tt=Kt.dot(H),Y=Kt.dot(I);if(tt<K&&tt>-K&&Y<Q&&Y>-Q){const $=Math.abs(W-P-p);if((null===F||$<F)&&(F=$,B=tt,C=Y,g=P,v.copy(L),w.copy(H),y.copy(I),b++,u))return!0}}}if(b){m=!0;const E=this.createContactEquation(r,c,t,e,a,h);v.scale(-p,E.ri),E.ni.copy(v),E.ni.negate(E.ni),v.scale(g,v),w.scale(B,w),v.vadd(w,v),y.scale(C,y),v.vadd(y,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),E.rj.vadd(n,E.rj),E.rj.vsub(c.position,E.rj),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult)}let N=d.get();const q=yo;for(let E=0;2!==E&&!m;E++)for(let k=0;2!==k&&!m;k++)for(let L=0;2!==L&&!m;L++)if(N.set(0,0,0),E?N.vadd(f[0],N):N.vsub(f[0],N),k?N.vadd(f[1],N):N.vsub(f[1],N),L?N.vadd(f[2],N):N.vsub(f[2],N),n.vadd(N,q),q.vsub(s,q),q.lengthSquared()<p*p){if(u)return!0;m=!0;const P=this.createContactEquation(r,c,t,e,a,h);P.ri.copy(q),P.ri.normalize(),P.ni.copy(P.ri),P.ri.scale(p,P.ri),P.rj.copy(N),P.ri.vadd(s,P.ri),P.ri.vsub(r.position,P.ri),P.rj.vadd(n,P.rj),P.rj.vsub(c.position,P.rj),this.result.push(P),this.createFrictionEquationsFromContact(P,this.frictionResult)}d.release(N),N=null;const T=d.get(),R=d.get(),V=d.get(),A=d.get(),S=d.get(),z=f.length;for(let E=0;E!==z&&!m;E++)for(let k=0;k!==z&&!m;k++)if(E%3!=k%3){f[k].cross(f[E],T),T.normalize(),f[E].vadd(f[k],R),V.copy(s),V.vsub(R,V),V.vsub(n,V);const L=V.dot(T);T.scale(L,A);let P=0;for(;P===E%3||P===k%3;)P++;S.copy(s),S.vsub(A,S),S.vsub(R,S),S.vsub(n,S);const W=Math.abs(L),H=S.length();if(W<f[P].length()&&H<p){if(u)return!0;m=!0;const I=this.createContactEquation(r,c,t,e,a,h);R.vadd(A,I.rj),I.rj.copy(I.rj),S.negate(I.ni),I.ni.normalize(),I.ri.copy(I.rj),I.ri.vadd(n,I.ri),I.ri.vsub(s,I.ri),I.ri.normalize(),I.ri.scale(p,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}d.release(T,R,V,A,S)}planeBox(t,e,s,n,i,o,r,c,a,h,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,h,u,d,f){const p=Ro;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,d,f)){const m=[],v=qo;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let y=0;y!==m.length;y++){if(u)return!0;const g=this.createContactEquation(r,c,t,e,a,h),b=g.ri,B=g.rj;p.negate(g.ni),m[y].normal.negate(v),v.scale(m[y].depth,v),m[y].point.vadd(v,b),B.copy(m[y].point),b.vsub(s,b),B.vsub(n,B),b.vadd(s,b),b.vsub(r.position,b),B.vadd(n,B),B.vsub(c.position,B),this.result.push(g),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,a,h,u){const d=this.v3pool;s.vsub(n,bo);const f=e.faceNormals,p=e.faces,m=e.vertices,v=t.radius;let w=!1;for(let y=0;y!==m.length;y++){const b=Co;o.vmult(m[y],b),n.vadd(b,b);const B=Eo;if(b.vsub(s,B),B.lengthSquared()<v*v){if(u)return!0;w=!0;const C=this.createContactEquation(r,c,t,e,a,h);return C.ri.copy(B),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(v,C.ri),b.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),void this.createFrictionEquationsFromContact(C,this.frictionResult)}}for(let y=0,g=p.length;y!==g&&!1===w;y++){const B=p[y],C=zo;o.vmult(f[y],C);const F=So;o.vmult(m[B[0]],F),F.vadd(n,F);const N=Fo;C.scale(-v,N),s.vadd(N,N);const q=Mo;N.vsub(F,q);const T=q.dot(C),R=_o;if(s.vsub(F,R),T<0&&R.dot(C)>0){const V=[];for(let A=0,S=B.length;A!==S;A++){const z=d.get();o.vmult(m[B[A]],z),n.vadd(z,z),V.push(z)}if(uo(V,C,s)){if(u)return!0;w=!0;const A=this.createContactEquation(r,c,t,e,a,h);C.scale(-v,A.ri),C.negate(A.ni);const S=d.get();C.scale(-T,S);const z=d.get();C.scale(-v,z),s.vsub(n,A.rj),A.rj.vadd(z,A.rj),A.rj.vadd(S,A.rj),A.rj.vadd(n,A.rj),A.rj.vsub(c.position,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),d.release(S),d.release(z),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);for(let E=0,k=V.length;E!==k;E++)d.release(V[E]);return}for(let A=0;A!==B.length;A++){const S=d.get(),z=d.get();o.vmult(m[B[(A+1)%B.length]],S),o.vmult(m[B[(A+2)%B.length]],z),n.vadd(S,S),n.vadd(z,z);const E=Ao;z.vsub(S,E);const k=Bo;E.unit(k);const L=d.get(),P=d.get();s.vsub(S,P);const W=P.dot(k);k.scale(W,L),L.vadd(S,L);const H=d.get();if(L.vsub(s,H),W>0&&W*W<E.lengthSquared()&&H.lengthSquared()<v*v){if(u)return!0;const I=this.createContactEquation(r,c,t,e,a,h);L.vsub(n,I.rj),L.vsub(s,I.ni),I.ni.normalize(),I.ni.scale(v,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(c.position,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let K=0,Q=V.length;K!==Q;K++)d.release(V[K]);return d.release(S),d.release(z),d.release(L),d.release(H),void d.release(P)}d.release(S),d.release(z),d.release(L),d.release(H),d.release(P)}for(let A=0,S=V.length;A!==S;A++)d.release(V[A])}}}planeConvex(t,e,s,n,i,o,r,c,a,h,u){const d=Io,f=No;f.set(0,0,1),i.vmult(f,f);let p=0;const m=To;for(let v=0;v!==e.vertices.length;v++)if(d.copy(e.vertices[v]),o.vmult(d,d),n.vadd(d,d),d.vsub(s,m),f.dot(m)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h),g=Po;f.scale(f.dot(m),g),d.vsub(g,g),g.vsub(s,y.ri),y.ni.copy(f),d.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(r.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(c.position,y.rj),this.result.push(y),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=t.radius,p=e.elementSize,m=Xo,v=Yo;j.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,y=Math.ceil((v.x+f)/p)+1,g=Math.floor((v.y-f)/p)-1,b=Math.ceil((v.y+f)/p)+1;if(y<0||b<0||w>d.length||g>d[0].length)return;w<0&&(w=0),y<0&&(y=0),g<0&&(g=0),b<0&&(b=0),w>=d.length&&(w=d.length-1),y>=d.length&&(y=d.length-1),b>=d[0].length&&(b=d[0].length-1),g>=d[0].length&&(g=d[0].length-1);const B=[];if(e.getRectMinMax(w,g,y,b,B),v.z-f>B[1]||v.z+f<B[0])return;const N=this.result;for(let q=w;q<y;q++)for(let T=g;T<b;T++){const R=N.length;let V=!1;if(e.getConvexTrianglePillar(q,T,!1),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(V=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&V||(e.getConvexTrianglePillar(q,T,!0),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(V=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&V))return!0;if(N.length-R>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,h,u){const d=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=Do,v=Uo,w=Go;j.pointToLocalFrame(n,o,s,w);let y=Math.floor((w.x-p)/f)-1,g=Math.ceil((w.x+p)/f)+1,b=Math.floor((w.y-p)/f)-1,B=Math.ceil((w.y+p)/f)+1;if(g<0||B<0||y>d.length||b>d[0].length)return;y<0&&(y=0),g<0&&(g=0),b<0&&(b=0),B<0&&(B=0),y>=d.length&&(y=d.length-1),g>=d.length&&(g=d.length-1),B>=d[0].length&&(B=d[0].length-1),b>=d[0].length&&(b=d[0].length-1);const C=[];if(e.getRectMinMax(y,b,g,B,C),!(w.z-p>C[1]||w.z+p<C[0]))for(let q=y;q<g;q++)for(let T=b;T<B;T++){let R=!1;if(e.getConvexTrianglePillar(q,T,!1),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&R||(e.getConvexTrianglePillar(q,T,!0),j.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,v,null)),u&&R))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,h,u){const d=jo;if(d.set(0,0,1),n.vsub(s,d),d.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,h);d.normalize(),p.rj.copy(d),p.rj.scale(t.radius,p.rj),p.ni.copy(d),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,h,u){const d=Lo;d.set(0,0,1),r.quaternion.vmult(d,d);const f=Wo;if(n.vsub(r.position,f),d.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(c,r,e,t,a,h);m.ni.copy(d),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=Vo;d.scale(d.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,h,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,h,u){let d=-1;const f=Oo,p=Ho;let m=null;const v=ko;if(v.copy(n),v.vsub(s,v),i.conjugate(Ze),Ze.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,y=t.faces.length;w!==y;w++){const b=t.worldFaceNormals[w];n.vsub(t.worldVertices[t.faces[w][0]],Ke);const B=-b.dot(Ke);if(null===m||Math.abs(B)<Math.abs(m)){if(u)return!0;m=B,d=w,f.copy(b)}}if(-1!==d){const w=this.createContactEquation(c,r,e,t,a,h);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const y=w.ri,g=w.rj;y.vadd(n,y),y.vsub(c.position,y),g.vadd(s,g),g.vsub(r.position,g),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,h,u)}particleCylinder(t,e,s,n,i,o,r,c,a,h,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,h,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=Ki,f=Qi,p=Ji,m=to,v=eo,w=so,y=ro,g=Zi,b=Xi,B=co;j.pointToLocalFrame(n,o,s,v);const C=t.radius;y.lowerBound.set(v.x-C,v.y-C,v.z-C),y.upperBound.set(v.x+C,v.y+C,v.z+C),e.getTrianglesInAABB(y,B);const F=$i,N=t.radius*t.radius;for(let A=0;A<B.length;A++)for(let S=0;S<3;S++)if(e.getVertex(e.indices[3*B[A]+S],F),F.vsub(v,b),b.lengthSquared()<=N){if(g.copy(F),j.pointToWorldFrame(n,o,g,F),F.vsub(s,b),u)return!0;let z=this.createContactEquation(r,c,t,e,a,h);z.ni.copy(b),z.ni.normalize(),z.ri.copy(z.ni),z.ri.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.copy(F),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}for(let A=0;A<B.length;A++)for(let S=0;S<3;S++){e.getVertex(e.indices[3*B[A]+S],d),e.getVertex(e.indices[3*B[A]+(S+1)%3],f),f.vsub(d,p),v.vsub(f,w);const z=w.dot(p);v.vsub(d,w);let E=w.dot(p);if(E>0&&z<0&&(v.vsub(d,w),m.copy(p),m.normalize(),E=w.dot(m),m.scale(E,w),w.vadd(d,w),w.distanceTo(v)<t.radius)){if(u)return!0;const L=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(c.position,L.rj),j.vectorToWorldFrame(o,L.ni,L.ni),j.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const q=no,T=io,R=oo,V=Yi;for(let A=0,S=B.length;A!==S;A++){e.getTriangleVertices(B[A],q,T,R),e.getNormal(B[A],V),v.vsub(q,w);let z=w.dot(V);if(V.scale(z,w),v.vsub(w,w),z=w.distanceTo(v),U.pointInTriangle(w,q,T,R)&&z<t.radius){if(u)return!0;let E=this.createContactEquation(r,c,t,e,a,h);w.vsub(v,E.ni),E.ni.normalize(),E.ni.scale(t.radius,E.ri),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(c.position,E.rj),j.vectorToWorldFrame(o,E.ni,E.ni),j.vectorToWorldFrame(o,E.ri,E.ri),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult)}}B.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,h,u){const d=new l,f=Gi;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,d);const m=new l;m.copy(d),j.pointToWorldFrame(n,o,m,d);const v=Di;if(d.vsub(s,v),f.dot(v)<=0){if(u)return!0;const y=this.createContactEquation(r,c,t,e,a,h);y.ni.copy(f);const g=Ui;f.scale(v.dot(f),g),d.vsub(g,g),y.ri.copy(g),y.ri.vsub(r.position,y.ri),y.rj.copy(d),y.rj.vsub(c.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const At=new l,Ct=new l,zt=new l,ji=new l,ki=new l,Oi=new D,Hi=new D,Gi=new l,Di=new l,Ui=new l,Yi=new l,Xi=new l;new l;const $i=new l,Zi=new l,Ki=new l,Qi=new l,Ji=new l,to=new l,eo=new l,so=new l,no=new l,io=new l,oo=new l,ro=new G,co=[],Zt=new l,$e=new l,ao=new l,lo=new l,ho=new l;function uo(x,t,e){let s=null;const n=x.length;for(let i=0;i!==n;i++){const o=x[i],r=ao;x[(i+1)%n].vsub(o,r);const c=lo;r.cross(t,c);const a=ho;e.vsub(o,a);const h=c.dot(a);if(!(null===s||h>0&&!0===s||h<=0&&!1===s))return!1;null===s&&(s=h>0)}return!0}const Kt=new l,po=new l,fo=new l,mo=new l,vo=[new l,new l,new l,new l,new l,new l],yo=new l,wo=new l,xo=new l,go=new l,bo=new l,Ao=new l,Bo=new l,Eo=new l,Co=new l,zo=new l,So=new l,Fo=new l,Mo=new l,_o=new l;new l,new l;const Io=new l,No=new l,To=new l,Po=new l,Ro=new l,qo=new l,Lo=new l,Wo=new l,Vo=new l,jo=new l,Ze=new D,ko=new l;new l;const Oo=new l,Ke=new l,Ho=new l,Go=new l,Do=new l,Uo=[0],Yo=new l,Xo=new l;class Qe{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const h=s[c];for(;h>n[r];)r++;a=h===n[r],a||Je(t,h)}r=0;for(let c=0;c<o;c++){let a=!1;const h=n[c];for(;h>s[r];)r++;a=s[r]===h,a||Je(e,h)}}}function Je(x,t){x.push((4294901760&t)>>16,65535&t)}const he=(x,t)=>x<t?`${x}-${t}`:`${t}-${x}`;class $o{constructor(){this.data={keys:[]}}get(t,e){const s=he(t,e);return this.data[s]}set(t,e,s){const n=he(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=he(t,e),n=this.data.keys.indexOf(s);-1!==n&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;)delete t[e.pop()]}}new G;const de=new U,X=globalThis.performance||{};if(!X.now){let x=Date.now();X.timing&&X.timing.navigationStart&&(x=X.timing.navigationStart),X.now=()=>Date.now()-x}new l;const Ko={type:"postStep"},Qo={type:"preStep"},qt={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},Jo=[],tr=[],er=[],sr=[],lt=[],ht=[],Lt={type:"beginContact",bodyA:null,bodyB:null},Wt={type:"endContact",bodyA:null,bodyB:null},dt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ut={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};addEventListener("message",({data:x})=>{let t=x.positions,e=x.quaternions,s=x.scales;if(Vt.position.set(x.mouse.x,x.mouse.y,x.mouse.z),x.create){let i=Qt.length;Z=new M({mass:ts,shape:new ae(1),angularDamping:.2,linearDamping:.01,material:es}),Z=ns(Z),Qt.push(Z),s[4*i+0]=.001,s[4*i+1]=0,s[4*i+2]=et(50,500),s[4*i+3]=0,St.addBody(Z)}St.step(x.dt);for(var n=0;n<Qt.length;n++)Z=Qt[n],jt=s[4*n+0],Ft=s[4*n+1],Mt=s[4*n+2],jt=ir(Ft/Mt)*Math.max(1-Mt/500,.5),Ft++,Ft>Mt&&(jt=.001,Ft=0,Mt=et(50,500),Z=ns(Z)),Z.shapes[0].radius=jt,ss.set(700*(x.mouse.x-Z.position.x),700*(x.mouse.y-Z.position.y),700*(x.mouse.z-Z.position.z)),Z.applyForce(ss,nr),Jt=Z.position,kt=Z.quaternion,t[3*n+0]=Jt.x,t[3*n+1]=Jt.y,t[3*n+2]=Jt.z,e[4*n+0]=kt.x,e[4*n+1]=kt.y,e[4*n+2]=kt.z,e[4*n+3]=kt.w,s[4*n+0]=jt,s[4*n+1]=Ft,s[4*n+2]=Mt,s[4*n+3]=Z.velocity.clone().length();postMessage({create:x.create,positions:t,quaternions:e,scales:s})});let St=new class Zo extends ve{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new Ts,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new zi,this.constraints=[],this.narrowphase=new Vi(this),this.collisionMatrix=new me,this.collisionMatrixPrevious=new me,this.bodyOverlapKeeper=new Qe,this.shapeOverlapKeeper=new Qe,this.contactmaterials=[],this.contactMaterialTable=new $o,this.defaultMaterial=new qe("default"),this.defaultContactMaterial=new bn(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Tt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return void 0===s&&(s={}),s.mode=U.ALL,s.from=t,s.to=e,s.callback=n,de.intersectWorld(this,s)}raycastAny(t,e,s,n){return void 0===s&&(s={}),s.mode=U.ANY,s.from=t,s.to=e,s.result=n,de.intersectWorld(this,s)}raycastClosest(t,e,s,n){return void 0===s&&(s={}),s.mode=U.CLOSEST,s.from=t,s.to=e,s.result=n,de.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(-1!==n){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=X.now()/1e3;this.step(t,this.lastCallTime?s-this.lastCallTime:void 0,e),this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=X.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(X.now()-n>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=er,n=sr,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,h=this.profile,u=M.DYNAMIC;let d=-1/0;const f=this.constraints,p=tr;c.length();const m=c.x,v=c.y,w=c.z;let y=0;for(a&&(d=X.now()),y=0;y!==i;y++){const A=o[y];if(A.type===u){const S=A.force,z=A.mass;S.x+=z*m,S.y+=z*v,S.z+=z*w}}for(let A=0,S=this.subsystems.length;A!==S;A++)this.subsystems[A].update();a&&(d=X.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(h.broadphase=X.now()-d);let g=f.length;for(y=0;y!==g;y++){const A=f[y];if(!A.collideConnected)for(let S=s.length-1;S>=0;S-=1)(A.bodyA===s[S]&&A.bodyB===n[S]||A.bodyB===s[S]&&A.bodyA===n[S])&&(s.splice(S,1),n.splice(S,1))}this.collisionMatrixTick(),a&&(d=X.now());const b=Jo,B=e.length;for(y=0;y!==B;y++)b.push(e[y]);e.length=0;const C=this.frictionEquations.length;for(y=0;y!==C;y++)p.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,b,this.frictionEquations,p),a&&(h.narrowphase=X.now()-d),a&&(d=X.now()),y=0;y<this.frictionEquations.length;y++)r.addEquation(this.frictionEquations[y]);const F=e.length;for(let A=0;A!==F;A++){const S=e[A],z=S.bi,E=S.bj,k=S.si,L=S.sj;let P;P=z.material&&E.material&&this.getContactMaterial(z.material,E.material)||this.defaultContactMaterial,z.material&&E.material&&z.material.restitution>=0&&E.material.restitution>=0&&(S.restitution=z.material.restitution*E.material.restitution),r.addEquation(S),z.allowSleep&&z.type===M.DYNAMIC&&z.sleepState===M.SLEEPING&&E.sleepState===M.AWAKE&&E.type!==M.STATIC&&E.velocity.lengthSquared()+E.angularVelocity.lengthSquared()>=2*E.sleepSpeedLimit**2&&(z.wakeUpAfterNarrowphase=!0),E.allowSleep&&E.type===M.DYNAMIC&&E.sleepState===M.SLEEPING&&z.sleepState===M.AWAKE&&z.type!==M.STATIC&&z.velocity.lengthSquared()+z.angularVelocity.lengthSquared()>=2*z.sleepSpeedLimit**2&&(E.wakeUpAfterNarrowphase=!0),this.collisionMatrix.set(z,E,!0),this.collisionMatrixPrevious.get(z,E)||(qt.body=E,qt.contact=S,z.dispatchEvent(qt),qt.body=z,E.dispatchEvent(qt)),this.bodyOverlapKeeper.set(z.id,E.id),this.shapeOverlapKeeper.set(k.id,L.id)}for(this.emitContactEvents(),a&&(h.makeContactConstraints=X.now()-d,d=X.now()),y=0;y!==i;y++){const A=o[y];A.wakeUpAfterNarrowphase&&(A.wakeUp(),A.wakeUpAfterNarrowphase=!1)}for(g=f.length,y=0;y!==g;y++){const A=f[y];A.update();for(let S=0,z=A.equations.length;S!==z;S++)r.addEquation(A.equations[S])}r.solve(t,this),a&&(h.solve=X.now()-d),r.removeAllEquations();const N=Math.pow;for(y=0;y!==i;y++){const A=o[y];if(A.type&u){const S=N(1-A.linearDamping,t),z=A.velocity;z.scale(S,z);const E=A.angularVelocity;if(E){const k=N(1-A.angularDamping,t);E.scale(k,E)}}}this.dispatchEvent(Qo),a&&(d=X.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)==0,R=this.quatNormalizeFast;for(y=0;y!==i;y++)o[y].integrate(t,T,R);this.clearForces(),this.broadphase.dirty=!0,a&&(h.integrate=X.now()-d),this.stepnumber+=1,this.dispatchEvent(Ko);let V=!0;if(this.allowSleep)for(V=!1,y=0;y!==i;y++){const A=o[y];A.sleepTick(this.time),A.sleepState!==M.SLEEPING&&(V=!0)}this.hasActiveBodies=V}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(lt,ht),t){for(let i=0,o=lt.length;i<o;i+=2)Lt.bodyA=this.getBodyById(lt[i]),Lt.bodyB=this.getBodyById(lt[i+1]),this.dispatchEvent(Lt);Lt.bodyA=Lt.bodyB=null}if(e){for(let i=0,o=ht.length;i<o;i+=2)Wt.bodyA=this.getBodyById(ht[i]),Wt.bodyB=this.getBodyById(ht[i+1]),this.dispatchEvent(Wt);Wt.bodyA=Wt.bodyB=null}lt.length=ht.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(lt,ht),s){for(let i=0,o=lt.length;i<o;i+=2){const r=this.getShapeById(lt[i]),c=this.getShapeById(lt[i+1]);dt.shapeA=r,dt.shapeB=c,r&&(dt.bodyA=r.body),c&&(dt.bodyB=c.body),this.dispatchEvent(dt)}dt.bodyA=dt.bodyB=dt.shapeA=dt.shapeB=null}if(n){for(let i=0,o=ht.length;i<o;i+=2){const r=this.getShapeById(ht[i]),c=this.getShapeById(ht[i+1]);ut.shapeA=r,ut.shapeB=c,r&&(ut.bodyA=r.body),c&&(ut.bodyB=c.body),this.dispatchEvent(ut)}ut.bodyA=ut.bodyB=ut.shapeA=ut.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force.set(0,0,0),n.torque.set(0,0,0)}}};St.broadphase=new Bt(St),St.gravity.set(0,0,0);const nr=new l(0,0,0),ts=300;let es=new qe("");es.friction=0;let Qt=[],Vt=new M({mass:ts,shape:new ae(1),position:new l(0,0,0),fixedRotation:!0});St.addBody(Vt);let Z,jt,Ft,Mt,Jt,kt,ss=new l;function ns(x){return x.position.set(Vt.position.x+et(-1,1),Vt.position.y+et(-1,1),Vt.position.z+et(-1,1)),x.quaternion.setFromAxisAngle(new l(et(1),et(1),et(1)),et(-180,180)),x.applyLocalImpulse(new l(30,30,30),new l(et(-30,30),et(-30,30),et(-30,30))),x.shapes[0].radius=.001,x}function ir(x){return function or(x,t,e){var s=Math.max(0,Math.min(1,(e-x)/(t-x)));return s*s*(3-2*s)}(0,.15,x)*(1-Math.pow(Math.max(0,2*Math.abs(x)-1),10))}function et(x,t){return x||(x=1),t||(t=x,x=0),Math.random()*(t-x)+x}})();